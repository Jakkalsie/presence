import type { GetServerSideProps } from "next";
import { Session } from "next-auth";
import Head from "next/head";
import { useEffect, useState } from "react";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from "../utils/trpc";

interface LocationData {
    latitude: number;
    longitude: number;
    accuracy: number;
    locationTimestamp: Date;
}

const Home = ({ auth: session }: { auth: Session }) => {
    const [watchId, setWatchId] = useState<number>();
    const [locationData, setLocationData] = useState<LocationData | null>(null);

    useEffect(() => {
        setWatchId(
            navigator.geolocation.watchPosition((position) => {
                console.log(position);
                const { latitude, longitude, accuracy } = position.coords;
                setLocationData({ latitude, longitude, accuracy, locationTimestamp: new Date(position.timestamp) });
            })
        );
    }, []);

    const [logged, setLogged] = useState(false);
    const [loading, setLoading] = useState(false);
    const logPresence = trpc.presence.log.useMutation();

    const handleLogPresence = async () => {
        setLoading(true);
        await logPresence.mutateAsync({ deviceTimestamp: new Date(), location: locationData });
        setLogged(true);

        if (watchId) navigator.geolocation.clearWatch(watchId);
    };

    return (
        <>
            <Head>
                <title>Zamaqo | Presence</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="absolute inset-0 flex items-center justify-center flex-col gap-16">
                <div className="flex flex-col items-center">
                    <h1 className="text-4xl font-bold">Zamaqo | Presence</h1>
                    <p className="text-xl">Welcome {session.user?.name}</p>
                </div>
                {logged ? (
                    <h1 className="text-2xl text-center py-4">Submission logged at {new Date().toLocaleTimeString()}</h1>
                ) : (
                    <button
                        className="shadow rounded-lg text-2xl font-medium px-6 py-4 enabled:hover:shadow-lg duration-100 disabled:opacity-50 disabled:bg-gray-100"
                        disabled={loading}
                        onClick={handleLogPresence}
                    >
                        Log Presence
                    </button>
                )}
            </main>
        </>
    );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getServerAuthSession(context);

    if (!session) {
        return {
            redirect: {
                destination: "/api/auth/signin",
                permanent: false,
            },
        };
    }

    return {
        props: {
            auth: session,
        },
    };
};
